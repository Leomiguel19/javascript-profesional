{"id":"ejercicios/this.html","dependencies":[{"name":"/home/practicas/media-player/package.json","includedInParent":true,"mtime":1667875079320}],"generated":{"html":"<html>\n  <head>\n    <title>this</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <h1>\n      <code>this</code> se refiere a un objeto. Ese objeto es el que actualmente\n      está ejecutando un pedazo de código.\n    </h1>\n\n    <script>// this en el scope global\nconsole.log(`this: ${this}`);\n\n// this en el scope de una función\nfunction whoIsThis() {\n  return this;\n}\nconsole.log(`whoIsThis(): ${whoIsThis()}`);\n\n// this en el scope de una función en strict mode\nfunction whoIsThisStrict() {\n  'use strict';\n\n  return this;\n}\nconsole.log(`whoIsThisStrict(): ${whoIsThisStrict()}`);\n\n// this en el contexto de un objeto\nconst person = {\n  name: 'Gabriel',\n  saludar: function () {\n    console.log(`Hola soy ${this.name}`);\n  }\n};\nperson.saludar();\n\n// this cuando sacamos a una función de un objeto\nconst accion = person.saludar;\naccion();\n\n// this en el contexto de una \"clase\"\nfunction Person(name) {\n  // this = {}\n  this.name = name;\n}\nPerson.prototype.saludar = function () {\n  console.log(`Me llamo ${this.name}`);\n};\nconst angela = new Person('Angela');\nangela.saludar();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"d66c956126f315d7c50fddc60988040d","cacheData":{"env":{}}}