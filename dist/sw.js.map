{"version":3,"sources":["sw.js"],"names":["VERSION","self","addEventListener","event","waitUntil","precache","request","method","respondWith","cachedResponse","updateCache","cache","caches","open","addAll","response","match","fetch","status","put","Promise","resolve","reject"],"mappings":"AAAA,MAAMA,OAAO,GAAG,IAAI;AAEpBC,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAEC,KAAK,IAAI;EACtCA,KAAK,CAACC,SAAS,CAACC,QAAQ,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEFJ,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAEC,KAAK,IAAI;EACpC,MAAMG,OAAO,GAAGH,KAAK,CAACG,OAAO;EAC7B;EACA,IAAIA,OAAO,CAACC,MAAM,KAAK,KAAK,EAAE;IAC1B;EACJ;;EAEA;EACAJ,KAAK,CAACK,WAAW,CAACC,cAAc,CAACH,OAAO,CAAC,CAAC;;EAE1C;EACAH,KAAK,CAACC,SAAS,CAACM,WAAW,CAACJ,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF,eAAeD,QAAQ,GAAG;EACtB,MAAMM,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;EACxC,OAAOW,KAAK,CAACG,MAAM,CAAC,CAChB,GAAG,EACH,aAAa,EACb,kBAAkB,EAClB,wBAAwB,EACxB,6BAA6B,EAC7B,8BAA8B,EAC9B,mBAAmB,EACnB,mBAAmB,CACtB,CAAC;AACN;AAEA,eAAeL,cAAc,CAACH,OAAO,EAAE;EACnC,MAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;EACxC,MAAMe,QAAQ,GAAG,MAAMJ,KAAK,CAACK,KAAK,CAACV,OAAO,CAAC;EAC3C,OAAOS,QAAQ,IAAIE,KAAK,CAACX,OAAO,CAAC;AACrC;;AAEA;AACA,eAAeI,WAAW,CAACJ,OAAO,EAAE;EAChC,MAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;EACxC,MAAMe,QAAQ,GAAG,MAAME,KAAK,CAACX,OAAO,CAAC;EACrC;EACA;EACA,OAAOS,QAAQ,CAACG,MAAM,KAAK,GAAG,GACxBP,KAAK,CAACQ,GAAG,CAACb,OAAO,EAAES,QAAQ,CAAC,GAC5B,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAKD,OAAO,CAAC,IAAI,CAAC,CAAC;AACzD","file":"sw.js","sourceRoot":"..","sourcesContent":["const VERSION = 'v1';\n\nself.addEventListener('install', event => {\n    event.waitUntil(precache());\n});\n\nself.addEventListener('fetch', event => {\n    const request = event.request;\n    // get\n    if (request.method !== 'GET') {\n        return;\n    }\n\n    // buscar en cache\n    event.respondWith(cachedResponse(request));\n\n    // actualizar el cache\n    event.waitUntil(updateCache(request));\n});\n\nasync function precache() {\n    const cache = await caches.open(VERSION);\n    return cache.addAll([\n        '/',\n        '/index.html',\n        '/assets/index.js',\n        '/assets/MediaPlayer.js',\n        '/assets/plugins/AutoPlay.js',\n        '/assets/plugins/AutoPause.js',\n        '/assets/index.css',\n        '/assets/video.mp4',\n    ]);\n}\n\nasync function cachedResponse(request) {\n    const cache = await caches.open(VERSION);\n    const response = await cache.match(request);\n    return response || fetch(request);\n}\n\n// it updates the cache given a request\nasync function updateCache(request) {\n    const cache = await caches.open(VERSION);\n    const response = await fetch(request);\n    // Cache.put when status code is 200 \n    // Otherwise return a simple promise \n    return response.status === 200 \n        ? cache.put(request, response) \n        : new Promise((resolve, reject) => resolve(':D'));    \n}"]}